// ESLint config generated by Nuxt
/// <reference path="./eslint-typegen.d.ts" />
/* eslint-disable */
// @ts-nocheck

import typegen from '../node_modules/.pnpm/eslint-typegen@2.3.0_eslint@9.32.0_jiti@2.5.1_/node_modules/eslint-typegen/dist/index.mjs';
import { createConfigForNuxt, defineFlatConfigs, resolveOptions } from '../node_modules/.pnpm/@nuxt+eslint-config@1.7.1_@typescript-eslint+utils@8.38.0_eslint@9.32.0_jiti@2.5.1__typ_65d1ca6df264055701258f3dd6c1c016/node_modules/@nuxt/eslint-config/dist/flat.mjs';
import { fileURLToPath } from 'node:url';

const r = (...args) => fileURLToPath(new URL(...args, import.meta.url))

export { defineFlatConfigs }

export const options = resolveOptions({
  features: {
  "standalone": true
},
  dirs: {
    pages: ["app/pages"],
    composables: ["app/composables", "app/utils"],
    components: ["app/components"],
    componentsPrefixed: [],
    layouts: ["app/layouts"],
    plugins: ["app/plugins"],
    middleware: ["app/middleware"],
    modules: ["modules"],
    servers: [],
    root: [],
    src: ["app"],
}
})

export const configs = createConfigForNuxt(options)

configs.append(
// Set globals from imports registry
{
  name: 'nuxt/import-globals',
  languageOptions: {
    globals: Object.fromEntries(["useTranslation","useTheme","useAppStore","getCookieLocale","getHeaderLanguage","getHeaderLanguages","getHeaderLocale","getHeaderLocales","getPathLocale","getQueryLocale","setCookieLocale","tryCookieLocale","tryHeaderLocale","tryHeaderLocales","tryPathLocale","tryQueryLocale","queryCollection","queryCollectionItemSurroundings","queryCollectionNavigation","queryCollectionSearchSections","queryCollection","queryCollectionItemSurroundings","queryCollectionNavigation","queryCollectionSearchSections","useNuxtDevTools","useImage","useScript","useScriptEventPage","useScriptTriggerConsent","useScriptTriggerElement","useScriptClarity","useScriptCloudflareWebAnalytics","useScriptCrisp","useScriptFathomAnalytics","useScriptGoogleAdsense","useScriptGoogleAnalytics","useScriptGoogleMaps","useScriptGoogleTagManager","useScriptHotjar","useScriptIntercom","useScriptLemonSqueezy","useScriptMatomoAnalytics","useScriptMetaPixel","useScriptNpm","useScriptPlausibleAnalytics","useScriptRybbitAnalytics","useScriptSegment","useScriptSnapchatPixel","useScriptStripe","useScriptUmamiAnalytics","useScriptVimeoPlayer","useScriptXPixel","useScriptYouTubePlayer","defineLocale","extendLocale","defineShortcuts","extractShortcuts","avatarGroupInjectionKey","useAvatarGroup","buttonGroupInjectionKey","useButtonGroup","useComponentIcons","useFileUpload","formBusInjectionKey","formFieldInjectionKey","formInputsInjectionKey","formLoadingInjectionKey","formOptionsInjectionKey","inputIdInjectionKey","useFormField","kbdKeysMap","useKbd","localeContextInjectionKey","useLocale","useOverlay","portalTargetInjectionKey","usePortal","useToast","useColorMode","defineI18nConfig","defineI18nLocale","defineI18nRoute","useBrowserLocale","useCookieLocale","useI18nPreloadKeys","useLocaleHead","useLocalePath","useLocaleRoute","useRouteBaseName","useSetI18nParams","useSwitchLocalePath","defineI18nLocaleDetector","defineI18nConfig","defineI18nLocale","parseMarkdown","parseMarkdown","stringifyMarkdown","stringifyMarkdown","unwrapSlot","acceptHMRUpdate","defineStore","storeToRefs","usePinia","defineAppConfig","__buildAssetsURL","__publicAssetsURL","definePageMeta","useI18n","cancelIdleCallback","requestIdleCallback","defineNuxtLink","clearNuxtData","refreshNuxtData","useAsyncData","useLazyAsyncData","useNuxtData","reloadNuxtApp","defineNuxtComponent","refreshCookie","useCookie","clearError","createError","isNuxtError","showError","useError","useFetch","useLazyFetch","injectHead","useHead","useHeadSafe","useSeoMeta","useServerHead","useServerHeadSafe","useServerSeoMeta","useHydration","defineLazyHydrationComponent","useLoadingIndicator","getAppManifest","getRouteRules","callOnce","definePayloadReducer","definePayloadReviver","isPrerendered","loadPayload","preloadPayload","prefetchComponents","preloadComponents","preloadRouteComponents","usePreviewMode","onNuxtReady","useRouteAnnouncer","abortNavigation","addRouteMiddleware","defineNuxtRouteMiddleware","navigateTo","setPageLayout","useRoute","useRouter","useRuntimeHook","onPrehydrate","prerenderRoutes","setResponseStatus","useRequestEvent","useRequestFetch","useRequestHeader","useRequestHeaders","useResponseHeader","clearNuxtState","useState","useRequestURL","updateAppConfig","useAppConfig","defineAppConfig","defineNuxtPlugin","definePayloadPlugin","tryUseNuxtApp","useNuxtApp","useRuntimeConfig","appendCorsHeaders","appendCorsPreflightHeaders","appendHeader","appendHeaders","appendResponseHeader","appendResponseHeaders","assertMethod","callNodeListener","clearResponseHeaders","clearSession","createApp","createAppEventHandler","createError","createEvent","createEventStream","createRouter","defaultContentType","defineEventHandler","defineLazyEventHandler","defineNodeListener","defineNodeMiddleware","defineRequestMiddleware","defineResponseMiddleware","defineWebSocket","defineWebSocketHandler","deleteCookie","dynamicEventHandler","eventHandler","fetchWithEvent","fromNodeMiddleware","fromPlainHandler","fromWebHandler","getCookie","getHeader","getHeaders","getMethod","getProxyRequestHeaders","getQuery","getRequestFingerprint","getRequestHeader","getRequestHeaders","getRequestHost","getRequestIP","getRequestPath","getRequestProtocol","getRequestURL","getRequestWebStream","getResponseHeader","getResponseHeaders","getResponseStatus","getResponseStatusText","getRouterParam","getRouterParams","getSession","getValidatedQuery","getValidatedRouterParams","handleCacheHeaders","handleCors","isCorsOriginAllowed","isError","isEvent","isEventHandler","isMethod","isPreflightRequest","isStream","isWebResponse","lazyEventHandler","parseCookies","promisifyNodeListener","proxyRequest","readBody","readFormData","readMultipartFormData","readRawBody","readValidatedBody","removeResponseHeader","sanitizeStatusCode","sanitizeStatusMessage","sealSession","send","sendError","sendIterable","sendNoContent","sendProxy","sendRedirect","sendStream","sendWebResponse","serveStatic","setCookie","setHeader","setHeaders","setResponseHeader","setResponseHeaders","setResponseStatus","splitCookiesString","toEventHandler","toNodeListener","toPlainHandler","toWebHandler","toWebRequest","unsealSession","updateSession","useBase","useSession","writeEarlyHints","useNitroApp","cachedEventHandler","cachedFunction","defineCachedEventHandler","defineCachedFunction","useAppConfig","useRuntimeConfig","useEvent","defineNitroErrorHandler","defineRouteMeta","defineNitroPlugin","nitroPlugin","defineRenderHandler","getRouteRules","useStorage","defineTask","runTask","Component","ComponentPublicInstance","computed","ComputedRef","customRef","defineAsyncComponent","defineComponent","DirectiveBinding","effect","effectScope","ExtractDefaultPropTypes","ExtractPropTypes","ExtractPublicPropTypes","getCurrentInstance","getCurrentScope","h","hasInjectionContext","inject","InjectionKey","isProxy","isReactive","isReadonly","isRef","isShallow","markRaw","MaybeRef","MaybeRefOrGetter","mergeModels","nextTick","onActivated","onBeforeMount","onBeforeUnmount","onBeforeUpdate","onDeactivated","onErrorCaptured","onMounted","onRenderTracked","onRenderTriggered","onScopeDispose","onServerPrefetch","onUnmounted","onUpdated","onWatcherCleanup","PropType","provide","proxyRefs","reactive","readonly","ref","Ref","resolveComponent","shallowReactive","shallowReadonly","shallowRef","toRaw","toRef","toRefs","toValue","triggerRef","unref","useAttrs","useCssModule","useCssVars","useId","useModel","useShadowRoot","useSlots","useTemplateRef","useTransitionState","VNode","watch","watchEffect","watchPostEffect","watchSyncEffect","withCtx","withDirectives","withKeys","withMemo","withModifiers","withScopeId","WritableComputedRef","isVue2","isVue3","onBeforeRouteLeave","onBeforeRouteUpdate","useLink"].map(i => [i, 'readonly'])),
  },
}
)

export function withNuxt(...customs) {
  return configs
    .clone()
    .append(...customs)
    .onResolved(configs => typegen(configs, { dtsPath: r("./eslint-typegen.d.ts"), augmentFlatConfigUtils: true }))
}

export default withNuxt
